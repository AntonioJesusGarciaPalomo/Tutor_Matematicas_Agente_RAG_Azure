# Azure Developer CLI configuration for LOCAL DEVELOPMENT
# This creates only the minimal Azure resources needed for local development
name: aifoundry-tutor-local
metadata:
  template: aifoundry-agent-local-dev@1.0.0
  description: Minimal Azure resources for local development of Math Tutor

# We only provision Azure some resources (AI Hub, Storage)
infra:
  provider: bicep
  path: infra
  module: main-local

# Environment variables that will be set after provisioning
environment:
  values:
    # These will be populated by azd after provisioning
    PROJECT_ENDPOINT: ${PROJECT_ENDPOINT}
    STORAGE_ACCOUNT_NAME: ${STORAGE_ACCOUNT_NAME}
    STORAGE_ACCOUNT_KEY: ${STORAGE_ACCOUNT_KEY}
    KEY_VAULT_NAME: ${KEY_VAULT_NAME}
    AI_HUB_NAME: ${AI_HUB_NAME}
    AI_PROJECT_NAME: ${AI_PROJECT_NAME}
    
    # Fixed values for local development
    MODEL_DEPLOYMENT_NAME: gpt-4o
    IMAGES_CONTAINER_NAME: images
    ENVIRONMENT: local
    DEBUG: true
    
    # Local URLs
    BACKEND_URI: http://localhost:8000
    FRONTEND_URI: http://localhost:7860

# Hooks for automation
hooks:
  # After provisioning, create .env file and setup local environment
  postprovision:
    windows:
      shell: pwsh
      run: |
        Write-Host "🎉 Azure resources provisioned successfully!" -ForegroundColor Green
        Write-Host ""
        Write-Host "📝 Creating .env file for local development..." -ForegroundColor Yellow
        
        # Get the values from azd environment
        $projectEndpoint = azd env get-value PROJECT_ENDPOINT
        $storageAccount = azd env get-value STORAGE_ACCOUNT_NAME
        $storageKey = azd env get-value STORAGE_ACCOUNT_KEY
        
        # Create .env file
        @"
        # ================================================
        # AUTO-GENERATED CONFIGURATION FOR LOCAL DEVELOPMENT
        # Generated: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")
        # ================================================
        
        # Azure AI Foundry
        PROJECT_ENDPOINT=$projectEndpoint
        MODEL_DEPLOYMENT_NAME=gpt-4o
        AGENT_NAME=math-tutor-agent
        
        # Azure Storage
        STORAGE_ACCOUNT_NAME=$storageAccount
        STORAGE_ACCOUNT_KEY=$storageKey
        IMAGES_CONTAINER_NAME=images
        
        # Local Development Settings
        ENVIRONMENT=local
        DEBUG=true
        LOG_LEVEL=INFO
        
        # Local Service URLs
        BACKEND_URI=http://localhost:8000
        FRONTEND_URI=http://localhost:7860
        PORT=8000
        FRONTEND_PORT=7860
        
        # Azure Settings
        AZURE_LOCATION=$env:AZURE_LOCATION
        RESOURCE_GROUP=rg-aifoundry-local-$env:AZURE_ENV_NAME
        "@ | Out-File -FilePath ".env" -Encoding UTF8
        
        # Copy to subdirectories
        Copy-Item ".env" "backend/.env" -Force
        Copy-Item ".env" "frontend/.env" -Force
        
        Write-Host "✅ .env files created successfully!" -ForegroundColor Green
        Write-Host ""
        Write-Host "🚀 Next steps:" -ForegroundColor Cyan
        Write-Host "  1. Run: python setup-and-verify.py" -ForegroundColor White
        Write-Host "  2. Start services: ./run-local.sh (or run-local.bat on Windows)" -ForegroundColor White
        Write-Host "  3. Open: http://localhost:7860" -ForegroundColor White
        
    posix:
      shell: sh
      run: |
        echo "🎉 Azure resources provisioned successfully!"
        echo ""
        echo "📝 Creating .env file for local development..."
        
        # Get the values from azd environment
        PROJECT_ENDPOINT=$(azd env get-value PROJECT_ENDPOINT)
        STORAGE_ACCOUNT=$(azd env get-value STORAGE_ACCOUNT_NAME)
        STORAGE_KEY=$(azd env get-value STORAGE_ACCOUNT_KEY)
        AZURE_LOCATION=$(azd env get-value AZURE_LOCATION)
        
        # Create .env file
        cat > .env << EOF
        # ================================================
        # AUTO-GENERATED CONFIGURATION FOR LOCAL DEVELOPMENT
        # Generated: $(date '+%Y-%m-%d %H:%M:%S')
        # ================================================
        
        # Azure AI Foundry
        PROJECT_ENDPOINT=$PROJECT_ENDPOINT
        MODEL_DEPLOYMENT_NAME=gpt-4o
        AGENT_NAME=math-tutor-agent
        
        # Azure Storage
        STORAGE_ACCOUNT_NAME=$STORAGE_ACCOUNT
        STORAGE_ACCOUNT_KEY=$STORAGE_KEY
        IMAGES_CONTAINER_NAME=images
        
        # Local Development Settings
        ENVIRONMENT=local
        DEBUG=true
        LOG_LEVEL=INFO
        
        # Local Service URLs
        BACKEND_URI=http://localhost:8000
        FRONTEND_URI=http://localhost:7860
        PORT=8000
        FRONTEND_PORT=7860
        
        # Azure Settings
        AZURE_LOCATION=$AZURE_LOCATION
        RESOURCE_GROUP=rg-aifoundry-local-${AZURE_ENV_NAME}
        EOF
        
        # Copy to subdirectories
        cp .env backend/.env
        cp .env frontend/.env
        
        echo "✅ .env files created successfully!"
        echo ""
        echo "🚀 Next steps:"
        echo "  1. Run: python setup-and-verify.py"
        echo "  2. Start services: ./run-local.sh"
        echo "  3. Open: http://localhost:7860"

  # Pre-down hook to warn user
  predown:
    windows:
      shell: pwsh
      run: |
        Write-Host "⚠️ WARNING: This will delete all Azure resources for local development" -ForegroundColor Yellow
        Write-Host "  - AI Hub and Project" -ForegroundColor Yellow
        Write-Host "  - Storage Account (including all stored images)" -ForegroundColor Yellow
        Write-Host "  - Key Vault" -ForegroundColor Yellow
        Write-Host ""
        $response = Read-Host "Are you sure you want to continue? (yes/no)"
        if ($response -ne "yes") {
            Write-Host "❌ Operation cancelled" -ForegroundColor Red
            exit 1
        }
    posix:
      shell: sh
      run: |
        echo "⚠️ WARNING: This will delete all Azure resources for local development"
        echo "  - AI Hub and Project"
        echo "  - Storage Account (including all stored images)"
        echo "  - Key Vault"
        echo ""
        read -p "Are you sure you want to continue? (yes/no): " response
        if [ "$response" != "yes" ]; then
            echo "❌ Operation cancelled"
            exit 1
        fi
