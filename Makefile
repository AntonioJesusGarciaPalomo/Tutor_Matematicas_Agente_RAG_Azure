.PHONY: help setup install-deps create-env run-backend run-frontend run-local run-docker test clean deploy provision

# Variables
PYTHON := python3
PIP := pip3
VENV_BACKEND := backend/.venv
VENV_FRONTEND := frontend/.venv
BACKEND_PORT := 8000
FRONTEND_PORT := 7860

# Colores para output
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[1;33m
NC := \033[0m # No Color

help: ## Muestra esta ayuda
	@echo "$(GREEN)Math Tutor - AI Foundry Agent Service$(NC)"
	@echo "======================================"
	@echo ""
	@echo "$(YELLOW)Comandos disponibles:$(NC)"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(GREEN)%-20s$(NC) %s\n", $$1, $$2}'

setup: create-env install-deps ## Configuraci√≥n completa del entorno local
	@echo "$(GREEN)‚úÖ Configuraci√≥n completada$(NC)"
	@echo ""
	@echo "$(YELLOW)Pr√≥ximos pasos:$(NC)"
	@echo "  1. Configura las variables en .env"
	@echo "  2. Ejecuta: make run-local"

create-env: ## Crea los entornos virtuales
	@echo "$(YELLOW)Creando entornos virtuales...$(NC)"
	@test -d $(VENV_BACKEND) || $(PYTHON) -m venv $(VENV_BACKEND)
	@test -d $(VENV_FRONTEND) || $(PYTHON) -m venv $(VENV_FRONTEND)
	@echo "$(GREEN)‚úÖ Entornos virtuales creados$(NC)"

install-deps: ## Instala todas las dependencias
	@echo "$(YELLOW)Instalando dependencias del backend...$(NC)"
	@. $(VENV_BACKEND)/bin/activate && $(PIP) install -q -r backend/requirements.txt
	@echo "$(YELLOW)Instalando dependencias del frontend...$(NC)"
	@. $(VENV_FRONTEND)/bin/activate && $(PIP) install -q -r frontend/requirements.txt
	@echo "$(GREEN)‚úÖ Dependencias instaladas$(NC)"

check-env: ## Verifica que el archivo .env existe
	@if [ ! -f .env ]; then \
		echo "$(RED)‚ùå Error: No se encontr√≥ el archivo .env$(NC)"; \
		echo "$(YELLOW)Crea el archivo .env desde la plantilla:$(NC)"; \
		echo "  cp .env.template .env"; \
		echo "  # Luego edita .env con tus valores"; \
		exit 1; \
	fi
	@cp .env backend/.env
	@cp .env frontend/.env

run-backend: check-env ## Ejecuta solo el backend
	@echo "$(YELLOW)üöÄ Iniciando Backend en http://localhost:$(BACKEND_PORT)$(NC)"
	@cd backend && . .venv/bin/activate && python main.py

run-frontend: check-env ## Ejecuta solo el frontend
	@echo "$(YELLOW)üöÄ Iniciando Frontend en http://localhost:$(FRONTEND_PORT)$(NC)"
	@cd frontend && . .venv/bin/activate && BACKEND_URI=http://localhost:$(BACKEND_PORT) python app.py

run-local: check-env ## Ejecuta backend y frontend juntos
	@echo "$(GREEN)üöÄ Iniciando Math Tutor en modo local...$(NC)"
	@echo "========================================="
	@bash run-local.sh

run-docker: check-env ## Ejecuta con Docker Compose
	@echo "$(YELLOW)üê≥ Iniciando con Docker Compose...$(NC)"
	@docker-compose up --build

run-docker-detached: check-env ## Ejecuta con Docker en segundo plano
	@echo "$(YELLOW)üê≥ Iniciando con Docker Compose (detached)...$(NC)"
	@docker-compose up -d --build
	@echo "$(GREEN)‚úÖ Servicios iniciados en segundo plano$(NC)"
	@echo "  Backend:  http://localhost:$(BACKEND_PORT)"
	@echo "  Frontend: http://localhost:$(FRONTEND_PORT)"

stop-docker: ## Detiene los contenedores Docker
	@echo "$(YELLOW)üõë Deteniendo contenedores...$(NC)"
	@docker-compose down
	@echo "$(GREEN)‚úÖ Contenedores detenidos$(NC)"

logs-backend: ## Muestra los logs del backend
	@docker-compose logs -f backend

logs-frontend: ## Muestra los logs del frontend
	@docker-compose logs -f frontend

test: check-env ## Ejecuta la suite de tests
	@echo "$(YELLOW)üß™ Ejecutando tests...$(NC)"
	@. $(VENV_BACKEND)/bin/activate && python -m pytest tests/ -v
	@echo "$(GREEN)‚úÖ Tests completados$(NC)"

test-backend: check-env ## Ejecuta solo tests del backend
	@echo "$(YELLOW)üß™ Ejecutando tests del backend...$(NC)"
	@. $(VENV_BACKEND)/bin/activate && python tests/test_backend.py
	@echo "$(GREEN)‚úÖ Tests del backend completados$(NC)"

test-integration: check-env ## Ejecuta tests de integraci√≥n
	@echo "$(YELLOW)üß™ Ejecutando tests de integraci√≥n...$(NC)"
	@. $(VENV_BACKEND)/bin/activate && python tests/test_integration.py
	@echo "$(GREEN)‚úÖ Tests de integraci√≥n completados$(NC)"

clean: ## Limpia archivos temporales y cach√©s
	@echo "$(YELLOW)üßπ Limpiando archivos temporales...$(NC)"
	@find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	@find . -type f -name "*.pyc" -delete
	@find . -type f -name ".DS_Store" -delete 2>/dev/null || true
	@echo "$(GREEN)‚úÖ Limpieza completada$(NC)"

clean-all: clean ## Limpia todo incluyendo entornos virtuales
	@echo "$(YELLOW)üßπ Limpiando entornos virtuales...$(NC)"
	@rm -rf $(VENV_BACKEND) $(VENV_FRONTEND)
	@echo "$(GREEN)‚úÖ Limpieza profunda completada$(NC)"

# Comandos de Azure
az-login: ## Login en Azure CLI
	@echo "$(YELLOW)üîê Iniciando sesi√≥n en Azure...$(NC)"
	@az login

az-set-subscription: ## Configura la suscripci√≥n de Azure
	@echo "$(YELLOW)üìã Suscripciones disponibles:$(NC)"
	@az account list --output table
	@echo ""
	@read -p "Ingresa el ID de la suscripci√≥n: " sub_id; \
	az account set --subscription $$sub_id
	@echo "$(GREEN)‚úÖ Suscripci√≥n configurada$(NC)"

provision: ## Aprovisiona la infraestructura en Azure
	@echo "$(YELLOW)üèóÔ∏è Aprovisionando infraestructura en Azure...$(NC)"
	@source .env && azd env set AZURE_LOCATION $$AZURE_LOCATION
	@azd provision
	@echo "$(GREEN)‚úÖ Infraestructura aprovisionada$(NC)"

deploy: ## Despliega la aplicaci√≥n en Azure
	@echo "$(YELLOW)üöÄ Desplegando aplicaci√≥n en Azure...$(NC)"
	@azd deploy
	@echo "$(GREEN)‚úÖ Aplicaci√≥n desplegada$(NC)"

destroy: ## Elimina todos los recursos de Azure
	@echo "$(RED)‚ö†Ô∏è  ADVERTENCIA: Esto eliminar√° todos los recursos de Azure$(NC)"
	@read -p "¬øEst√°s seguro? (y/N): " confirm; \
	if [ "$confirm" = "y" ] || [ "$confirm" = "Y" ]; then \
		echo "$(YELLOW)üóëÔ∏è Eliminando recursos...$(NC)"; \
		azd down; \
		echo "$(GREEN)‚úÖ Recursos eliminados$(NC)"; \
	else \
		echo "$(YELLOW)Operaci√≥n cancelada$(NC)"; \
	fi

# Utilidades de desarrollo
format: ## Formatea el c√≥digo con black
	@echo "$(YELLOW)üé® Formateando c√≥digo...$(NC)"
	@. $(VENV_BACKEND)/bin/activate && pip install -q black && black backend/
	@. $(VENV_FRONTEND)/bin/activate && pip install -q black && black frontend/
	@echo "$(GREEN)‚úÖ C√≥digo formateado$(NC)"

lint: ## Ejecuta linters en el c√≥digo
	@echo "$(YELLOW)üîç Analizando c√≥digo...$(NC)"
	@. $(VENV_BACKEND)/bin/activate && pip install -q pylint && pylint backend/*.py || true
	@. $(VENV_FRONTEND)/bin/activate && pip install -q pylint && pylint frontend/*.py || true
	@echo "$(GREEN)‚úÖ An√°lisis completado$(NC)"

health-check: ## Verifica el estado de los servicios
	@echo "$(YELLOW)üè• Verificando estado de servicios...$(NC)"
	@curl -s http://localhost:$(BACKEND_PORT)/health | python -m json.tool || echo "$(RED)‚ùå Backend no responde$(NC)"
	@curl -s http://localhost:$(FRONTEND_PORT) > /dev/null && echo "$(GREEN)‚úÖ Frontend activo$(NC)" || echo "$(RED)‚ùå Frontend no responde$(NC)"

monitor: ## Monitorea los servicios en tiempo real
	@echo "$(YELLOW)üìä Monitoreando servicios...$(NC)"
	@watch -n 2 'curl -s http://localhost:$(BACKEND_PORT)/health | python -m json.tool'

# Desarrollo r√°pido
dev: setup run-local ## Setup completo y ejecuci√≥n local

rebuild: clean-all setup ## Reconstruye todo desde cero

restart: stop-docker run-docker-detached ## Reinicia los contenedores Docker

.DEFAULT_GOAL := help