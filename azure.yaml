name: aifoundry-tutor
metadata:
  template: aifoundry-agent-tutor@1.0.0
services:
  backend:
    project: ./backend
    language: python
    host: containerapp
    docker:
      # Las propiedades 'path' y 'context' se han eliminado para usar las convenciones de azd
      registry: ${AZURE_CONTAINER_REGISTRY_ENDPOINT}
    env:
      PROJECT_ENDPOINT: ${PROJECT_ENDPOINT}
      MODEL_DEPLOYMENT_NAME: ${MODEL_DEPLOYMENT_NAME}
      STORAGE_ACCOUNT_NAME: ${STORAGE_ACCOUNT_NAME}
      IMAGES_CONTAINER_NAME: ${IMAGES_CONTAINER_NAME}
  
  frontend:
    project: ./frontend
    language: python
    host: appservice
    docker:
      # Las propiedades 'path' y 'context' se han eliminado para usar las convenciones de azd
      registry: ${AZURE_CONTAINER_REGISTRY_ENDPOINT}
    env:
      BACKEND_URI: ${BACKEND_URI}

# Hooks para validaci√≥n y configuraci√≥n
hooks:
  # Pre-provision: Validaciones antes de crear infraestructura
  preprovision:
    windows:
      shell: pwsh
      run: |
        Write-Host "üîç Validating environment configuration..." -ForegroundColor Yellow
        
        # Verificar que tenemos los archivos necesarios
        if (-not (Test-Path ".env.template")) {
            Write-Error ".env.template not found!"
            exit 1
        }
        
        # Verificar estructura de proyecto
        $required = @("backend", "frontend", "infra")
        foreach ($dir in $required) {
            if (-not (Test-Path $dir)) {
                Write-Error "Directory $dir not found!"
                exit 1
            }
        }
        
        Write-Host "‚úÖ Pre-provision validation passed" -ForegroundColor Green
    posix:
      shell: sh
      run: |
        echo "üîç Validating environment configuration..."
        
        # Verificar archivos necesarios
        if [ ! -f ".env.template" ]; then
            echo "Error: .env.template not found!"
            exit 1
        fi
        
        # Verificar estructura de proyecto
        for dir in backend frontend infra; do
            if [ ! -d "$dir" ]; then
                echo "Error: Directory $dir not found!"
                exit 1
            fi
        done
        
        echo "‚úÖ Pre-provision validation passed"

  # Post-provision: Configurar variables despu√©s de crear infraestructura
  postprovision:
    windows:
      shell: pwsh
      run: |
        Write-Host "‚öôÔ∏è Setting environment variables from infrastructure outputs..." -ForegroundColor Yellow
        
        # Configurar variables de entorno
        azd env set PROJECT_ENDPOINT $env:PROJECT_ENDPOINT
        azd env set BACKEND_URI $env:BACKEND_URI
        azd env set FRONTEND_URI $env:FRONTEND_URI
        azd env set STORAGE_ACCOUNT_NAME $env:STORAGE_ACCOUNT_NAME
        azd env set IMAGES_CONTAINER_NAME $env:IMAGES_CONTAINER_NAME
        azd env set AZURE_CONTAINER_REGISTRY_ENDPOINT $env:AZURE_CONTAINER_REGISTRY_ENDPOINT
        azd env set MODEL_DEPLOYMENT_NAME "gpt-4o"
        
        # Crear archivo .env local
        @"
        PROJECT_ENDPOINT=$env:PROJECT_ENDPOINT
        MODEL_DEPLOYMENT_NAME=gpt-4o
        STORAGE_ACCOUNT_NAME=$env:STORAGE_ACCOUNT_NAME
        IMAGES_CONTAINER_NAME=$env:IMAGES_CONTAINER_NAME
        BACKEND_URI=$env:BACKEND_URI
        FRONTEND_URI=$env:FRONTEND_URI
        AZURE_CONTAINER_REGISTRY_ENDPOINT=$env:AZURE_CONTAINER_REGISTRY_ENDPOINT
        "@ | Out-File -FilePath ".env" -Encoding UTF8
        
        Write-Host "‚úÖ Environment variables configured" -ForegroundColor Green
    posix:
      shell: sh
      run: |
        echo "‚öôÔ∏è Setting environment variables from infrastructure outputs..."
        
        # Configurar variables de entorno
        azd env set PROJECT_ENDPOINT $PROJECT_ENDPOINT
        azd env set BACKEND_URI $BACKEND_URI
        azd env set FRONTEND_URI $FRONTEND_URI
        azd env set STORAGE_ACCOUNT_NAME $STORAGE_ACCOUNT_NAME
        azd env set IMAGES_CONTAINER_NAME $IMAGES_CONTAINER_NAME
        azd env set AZURE_CONTAINER_REGISTRY_ENDPOINT $AZURE_CONTAINER_REGISTRY_ENDPOINT
        azd env set MODEL_DEPLOYMENT_NAME "gpt-4o"
        
        # Crear archivo .env local
        cat > .env << EOF
        PROJECT_ENDPOINT=$PROJECT_ENDPOINT
        MODEL_DEPLOYMENT_NAME=gpt-4o
        STORAGE_ACCOUNT_NAME=$STORAGE_ACCOUNT_NAME
        IMAGES_CONTAINER_NAME=$IMAGES_CONTAINER_NAME
        BACKEND_URI=$BACKEND_URI
        FRONTEND_URI=$FRONTEND_URI
        AZURE_CONTAINER_REGISTRY_ENDPOINT=$AZURE_CONTAINER_REGISTRY_ENDPOINT
        EOF
        
        echo "‚úÖ Environment variables configured"

  # Pre-deploy: Validaciones antes de desplegar c√≥digo
  predeploy:
    windows:
      shell: pwsh
      run: |
        Write-Host "üîç Pre-deployment validation..." -ForegroundColor Yellow
        
        # Verificar que .env existe
        if (-not (Test-Path ".env")) {
            Write-Error ".env file not found! Run 'azd provision' first."
            exit 1
        }
        
        # Verificar que las im√°genes Docker se pueden construir
        Write-Host "üê≥ Validating Docker builds..." -ForegroundColor Yellow
        
        docker build -t backend-test ./backend
        if ($LASTEXITCODE -ne 0) {
            Write-Error "Backend Docker build failed!"
            exit 1
        }
        
        docker build -t frontend-test ./frontend
        if ($LASTEXITCODE -ne 0) {
            Write-Error "Frontend Docker build failed!"
            exit 1
        }
        
        Write-Host "‚úÖ Pre-deployment validation passed" -ForegroundColor Green
    posix:
      shell: sh
      run: |
        echo "üîç Pre-deployment validation..."
        
        # Verificar que .env existe
        if [ ! -f ".env" ]; then
            echo "Error: .env file not found! Run 'azd provision' first."
            exit 1
        fi
        
        # Verificar que las im√°genes Docker se pueden construir
        echo "üê≥ Validating Docker builds..."
        
        docker build -t backend-test ./backend || {
            echo "Error: Backend Docker build failed!"
            exit 1
        }
        
        docker build -t frontend-test ./frontend || {
            echo "Error: Frontend Docker build failed!"
            exit 1
        }
        
        echo "‚úÖ Pre-deployment validation passed"

  # Post-deploy: Verificaciones despu√©s del despliegue
  postdeploy:
    windows:
      shell: pwsh
      run: |
        Write-Host "üîç Post-deployment verification..." -ForegroundColor Yellow
        
        # Esperar un poco para que los servicios inicien
        Start-Sleep -Seconds 30
        
        # Verificar backend health
        $backendUri = azd env get-value BACKEND_URI
        try {
            $response = Invoke-WebRequest -Uri "$backendUri/health" -TimeoutSec 30
            if ($response.StatusCode -eq 200) {
                Write-Host "‚úÖ Backend is healthy" -ForegroundColor Green
            }
        } catch {
            Write-Warning "‚ö†Ô∏è Backend health check failed - this is normal if the service is still starting"
        }
        
        # Verificar frontend
        $frontendUri = azd env get-value FRONTEND_URI
        try {
            $response = Invoke-WebRequest -Uri $frontendUri -TimeoutSec 30
            if ($response.StatusCode -eq 200) {
                Write-Host "‚úÖ Frontend is accessible" -ForegroundColor Green
            }
        } catch {
            Write-Warning "‚ö†Ô∏è Frontend check failed - this is normal if the service is still starting"
        }
        
        Write-Host "`nüéâ Deployment completed!" -ForegroundColor Green
        Write-Host "Frontend URL: $frontendUri" -ForegroundColor Cyan
        Write-Host "Backend Health: $backendUri/health" -ForegroundColor Cyan
    posix:
      shell: sh
      run: |
        echo "üîç Post-deployment verification..."
        
        # Esperar un poco para que los servicios inicien
        sleep 30
        
        # Verificar backend health
        BACKEND_URI=$(azd env get-value BACKEND_URI)
        if curl -f "$BACKEND_URI/health" -m 30 2>/dev/null; then
            echo "‚úÖ Backend is healthy"
        else
            echo "‚ö†Ô∏è Backend health check failed - this is normal if the service is still starting"
        fi
        
        # Verificar frontend
        FRONTEND_URI=$(azd env get-value FRONTEND_URI)
        if curl -f "$FRONTEND_URI" -m 30 2>/dev/null; then
            echo "‚úÖ Frontend is accessible"
        else
            echo "‚ö†Ô∏è Frontend check failed - this is normal if the service is still starting"
        fi
        
        echo ""
        echo "üéâ Deployment completed!"
        echo "Frontend URL: $FRONTEND_URI"
        echo "Backend Health: $BACKEND_URI/health"